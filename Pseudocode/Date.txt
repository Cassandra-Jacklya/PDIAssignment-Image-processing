CLASS: Date

CLASS FIELDS: day (INTEGER)  
              month (INTEGER)
              year (INTEGER)

CONSTRUCTORS:
Default:
IMPORT: none
EXPORT: address of new Date object	
ASSERTION: Date object will be 1/1/2020
ALGORITHM: 
	day := 1
	month := 1
	year := 2020

Alternate:
IMPORT: inDay (INTEGER). inMonth (INTEGER), inYear (INTEGER)
EXPORT: address of new Date object
ASSERTION: Creates the new Date object if the imports are valid and FAILS otherwise
ALGORITHM:
	day := CALL inDay.getDay()
	month := CALL inMonth.getMonth()
	year := CALL inYear.getYear()

Copy:
IMPORT: inDate (Date)
EXPORT: address of the new Date object
ASSERTION: Creates an object with an identical state as the import
ALGORITHM:
	day := CALL inDay.getDay()
	month := CALL inMonth.getMonth()
	year := CALL inYear.getYear()
	    
MUTATORS:
SUBMODULE: setDay
IMPORT: inDay (INTEGER), inMonth (INTEGER), inYear (INTEGER)
EXPORT: none
ASSERTION: sets the day to inDay
ALGORITHM:
	IF (CALL validDay(inDay,inMonth,inYear) THEN
	    day := inDay
	ELSE
	    THROW invalid argument exception
	END IF

SUBMODULE: setMonth
IMPORT: inMonth (INTEGER)
EXPORT: none
ASSERTION: sets the month to inMonth
ALGORITHM: 
	IF (CALL validMonth(inMonth)) THEN
	    month :- inMonth
	ELSE
	    THROW invalid argument exception
	END IF

SUBMODULE: setYear
IMPORT: inYear (INTEGER)
EXPORT: none
ASSERTION: sets the year to inYear
ALGORITHM:
	IF (CALL validYear(inYear)) THEN
	    year := inYear
	ELSE
	    THROW invalid argument exception
	END IF

SUBMODULE: equals
IMPORT : inObj (Object)
EXPORT: same (Boolean)
ASSERTION: returns true if the two objects are the same
ALGORITHM:
	DECLARE same as BOOLEAN := FALSE
	IF (inObj IS AN INSTANCE OF Date) THEN
	    Date inDate := (CONVERT TO DATE)(inObj)
	    same := (day = CALL inDate.getDay() AND month = CALL inDate.getMonth() AND year = CALL inDate.getYear())
	END IF
	RETURN same

ACCESORS:
SUBMODULE: getDay
IMPORT: none
EXPORT: day

SUBMODULE: getMonth
IMPORT: none
EXPORT: month

SUBMODULE: getYear
IMPORT: none
EXPORT: year

SUBMODULE: clone
IMPORT: none
EXPORT: cloneDate (OBJECT)
ASSERTION: Returns a cloned object of the current object
ALGORITHM:
	CONSTRUCT cloneDate USING COPY CONSTRUCTOR WITH THIS OBJECT

SUBMODULE: toString
IMPORT: none
EXPORT: strMsg (String)
ASSERTION:
ALGORITHM:
	DECLARE strMsg as STRING 
	strMsg := year + "-" + month + "-" + day
	REUTRN strMsg

SUBMODULE: isLeapYear
IMPORT: inYear (INTEGER)
EXPORT: valid (BOOLEAN)
ASSERTION: Leap years are years that is divisible by 4 and not divisible by 100 or year is divisible by 400
ALGORITHM:
	valid := ((inYear MOD 4 = 0 AND inYear MOD 100 <>0) OR (inYear MOD 400 = 0) THEN
 
PRIVATE SUBMODULES:
SUBMODULE: validDay
IMPORT: inDay (INTEGER), inMonth (INTEGER), inYear (INTEGER)
EXPORT: valid (BOOLEAN)
ASSERTION: Day is valid if value is 1 to 31
ALGORITHM:
	IF (CALL isLeapYear(inYear)) THEN
	    CASE (inMonth)
	    	1: 3: 5: 7: 8: 10: 12:
		    valid := (inDay >= 1) AND (inDay <= 31)
		2: 
		    valid := (inDay >= 1) AND (inDay <= 29)
		4: 6: 9: 11:
		    valid := (inDay >= 1) AND (inDay <= 30)
	    END CASE
	ELSE
	    CASE (inMonth)
		1: 3: 5: 7: 8: 10: 12:
		    valid := (inDay >= 1) AND (inDay <= 31)
		2:
		    valid := (inDay >= 1) AND (inDay <= 28)
		4: 6: 9: 11:
		    valid := (inDay >= 1) AND (inDay <= 30)
	    END CASE

SUBMODULE: validMonth
IMPORT: inMonth (INTEGER)
EXPORT: valid (BOOLEAN)
ASSERTION: Month is valid if value is 1 to 12
ALGORITHM:
	valid := (inMonth >= 1) AND (inMonth <= 12)

SUBMODULE: validYear
IMPORT: inYear (INTEGER)
EXPORT: valid (BOOLEAN)
ASSERTION: Year is valid if value is 0001 or above
ALGORITHM:
	valid := inYear > 1


